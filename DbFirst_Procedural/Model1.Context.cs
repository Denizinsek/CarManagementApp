//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DbFirst_Procedural
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DbFirstApp2Entities : DbContext
    {
        public DbFirstApp2Entities()
            : base("name=DbFirstApp2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
    
        public virtual int CustomerDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerDelete", idParameter);
        }
    
        public virtual ObjectResult<CustomerList_Result> CustomerList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerList_Result>("CustomerList");
        }
    
        public virtual ObjectResult<CustomerName_Search_Result> CustomerName_Search(string namesearch)
        {
            var namesearchParameter = namesearch != null ?
                new ObjectParameter("namesearch", namesearch) :
                new ObjectParameter("namesearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerName_Search_Result>("CustomerName_Search", namesearchParameter);
        }
    
        public virtual int CustomerSave(string namesurname, string tc, string product, Nullable<decimal> price)
        {
            var namesurnameParameter = namesurname != null ?
                new ObjectParameter("namesurname", namesurname) :
                new ObjectParameter("namesurname", typeof(string));
    
            var tcParameter = tc != null ?
                new ObjectParameter("tc", tc) :
                new ObjectParameter("tc", typeof(string));
    
            var productParameter = product != null ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerSave", namesurnameParameter, tcParameter, productParameter, priceParameter);
        }
    
        public virtual int CustomerUpdate(Nullable<int> id, string namesurname, string tc, string product, Nullable<decimal> price)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var namesurnameParameter = namesurname != null ?
                new ObjectParameter("namesurname", namesurname) :
                new ObjectParameter("namesurname", typeof(string));
    
            var tcParameter = tc != null ?
                new ObjectParameter("tc", tc) :
                new ObjectParameter("tc", typeof(string));
    
            var productParameter = product != null ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerUpdate", idParameter, namesurnameParameter, tcParameter, productParameter, priceParameter);
        }
    }
}
